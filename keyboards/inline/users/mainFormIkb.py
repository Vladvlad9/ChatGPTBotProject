import logging

from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message
from aiogram.utils.callback_data import CallbackData

from config import CONFIG
from crud import CRUDUser, CRUDSubscription
from crud.referralCRUD import CRUDReferral
from handlers.users.base_text import BaseText
from loader import bot
from schemas import UserSchema, ReferralSchema

main_cb = CallbackData("main", "target", "action", "id", "editId")


class MainForms:
    @staticmethod
    async def check_sub_channel(user_id: int):
        try:
            chat_member = await bot.get_chat_member(chat_id=str(CONFIG.CHANNEL.CHANNEL_ID), user_id=user_id)
            if chat_member['status'] == 'left':
                return False
            return True
        except Exception as e:
            logging.error(f'Error check sub channel: {e}')

    @staticmethod
    async def main_ikb() -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üë§–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å",
                                         callback_data=main_cb.new("myProfile", "getProfile", 0, 0)),
                ],
                [
                    InlineKeyboardButton(text="üí¨–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥",
                                         callback_data=main_cb.new("newDialogue", "getDialog", 0, 0)),
                    InlineKeyboardButton(text="üÜò–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å", callback_data=main_cb.new("help", "getHelp", 0, 0))
                ]
            ]
        )

    @staticmethod
    async def getDialog_ikb() -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úîÔ∏è–ü–æ–¥–ø–∏—Å–∫–∞",
                                         callback_data=main_cb.new("newDialogue", "SubscriptionGPT", 0, 0)),
                ],
                [
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                                         callback_data=main_cb.new("Main", 0, 0, 0))
                ]
            ]
        )

    @staticmethod
    async def my_profile_ikb() -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üíµ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ChatGPT",
                                         callback_data=main_cb.new("myProfile", "subscriptionGPT", 0, 0)),
                ],
                [
                    InlineKeyboardButton(text="ü§ù –ü–æ–ª—É—á–∏—Ç—å 3 –∑–∞–ø—Ä–æ—Å–∞ ChatGPT",
                                         callback_data=main_cb.new("myProfile", "get_inquiries", 0, 0))
                ],
                [
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                                         callback_data=main_cb.new("Main", 0, 0, 0))
                ]
            ]
        )

    @staticmethod
    async def pay_subscription_ikb(targetMain: str,
                                   actionMain: str, targetBack: str, actionBack: str) -> InlineKeyboardMarkup:

        return InlineKeyboardMarkup(
            inline_keyboard=[
                                [
                                    InlineKeyboardButton(text=f"{name.name} –∑–∞ {name.price},00 ‚ÇΩ",
                                                         callback_data=main_cb.new(targetMain,
                                                                                   actionMain, name.id, 0))
                                ]
                                for name in await CRUDSubscription.get_all()
                            ] + [
                                [
                                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                                                         callback_data=main_cb.new(targetBack, actionBack, 0, 0))
                                ]
                            ]
        )

    @staticmethod
    async def help_ikb() -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üõ†Ô∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
                                         url=CONFIG.HELP.TechnicalSupport),
                ],
                [
                    InlineKeyboardButton(text="‚ùî –†–µ–∫–ª–∞–º–∞ –∏ –ø—Ä–æ—á–∏–µ –≤–æ–ø—Ä–æ—Å—ã",
                                         url=CONFIG.HELP.AdvertisingOtherIssues),
                ],
                [
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                                         callback_data=main_cb.new("Main", 0, 0, 0))
                ]
            ]
        )

    @staticmethod
    async def sub_channel_ikb() -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=CONFIG.CHANNEL.CHANNEL_NAME),
                    InlineKeyboardButton(text="–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data=main_cb.new("subChannelDone", 0, 0, 0))
                ]
            ]
        )

    @staticmethod
    async def back_ikb(target: str, action: str) -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=main_cb.new(target, action, 0, 0))
                ]
            ]
        )

    @staticmethod
    async def process(callback: CallbackQuery = None, message: Message = None, state: FSMContext = None) -> None:
        if callback:
            if callback.data.startswith("main"):
                data = main_cb.parse(callback_data=callback.data)

                if data.get("target") == "Main":
                    text = await BaseText.base_txt_main_form()
                    await callback.message.edit_text(text=text,
                                                     reply_markup=await MainForms.main_ikb())

                elif data.get("target") == "subChannelDone":
                    text = await BaseText.base_txt_main_form()

                    if await MainForms.check_sub_channel(user_id=callback.from_user.id):
                        get_user = await CRUDUser.get(user_id=callback.from_user.id)
                        if not get_user:
                            await CRUDUser.add(user=UserSchema(user_id=callback.from_user.id))

                        await callback.message.edit_text(text=text,
                                                         reply_markup=await MainForms.main_ikb())
                    else:
                        try:
                            await callback.message.edit_text(text="–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!!",
                                                             reply_markup=await MainForms.sub_channel_ikb())
                        except Exception as e:
                            await callback.message.edit_text(text="–í—ã –≤—Å–µ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!",
                                                             reply_markup=await MainForms.sub_channel_ikb())

                elif data.get('target') == "myProfile":
                    if data.get('action') == "getProfile":
                        text = "üí¨ –î–æ—Å—Ç—É–ø–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è ChatGPT: 3\n\n" \
                               "–ó–∞—á–µ–º –∑–∞–ø—Ä–æ—Å—ã ChatGPT?\n\n" \
                               "–ó–∞–¥–∞–≤–∞—è –≤–æ–ø—Ä–æ—Å—ã - —Ç—ã —Ç—Ä–∞—Ç–∏—à—å 1 –∑–∞–ø—Ä–æ—Å. " \
                               "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ –º–æ–∂–Ω–æ —Ç—Ä–∞—Ç–∏—Ç—å 3 –∑–∞–ø—Ä–æ—Å–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å. " \
                               "–ó–∞–ø—Ä–æ—Å—ã –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 06:00\n\n" \
                               "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ ChatGPT?\n\n" \
                               "- –í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è ChatGPT –∏ –Ω–µ –ø–∞—Ä–∏—Ç—å—Å—è –æ –ª–∏–º–∏—Ç–∞—Ö.\n" \
                               "- –ü—Ä–∏–≥–ª–∞—Å–∏ —á–µ–ª–æ–≤–µ–∫–∞ –∏ –ø–æ–ª—É—á–∏ –∑–∞ –Ω–µ–≥–æ 3 –∑–∞–ø—Ä–æ—Å–∞ ChatGPT " \
                               "–∏ 1 –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n\n" \
                               "–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—â–∞—Ç—å—Å—è —Å ChatGPT " \
                               '<a href="https://telegra.ph/Gajd-Kak-sostavit-horoshij-zapros-v-ChatGPT-s-primerami' \
                               '-04-08-2">–£–∑–Ω–∞—Ç—å</a>'

                        await callback.message.edit_text(text=text,
                                                         parse_mode="HTML",
                                                         disable_web_page_preview=True,
                                                         reply_markup=await MainForms.my_profile_ikb())

                    elif data.get('action') == "subscriptionGPT":
                        text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏."
                        await callback.message.edit_text(text=text,
                                                         reply_markup=await MainForms.pay_subscription_ikb(
                                                             targetMain="myProfile",
                                                             actionMain="subscriptionGPT",
                                                             targetBack="myProfile",
                                                             actionBack="getProfile"
                                                         ))

                    elif data.get('action') == "get_inquiries":
                        get_referral = await CRUDReferral.get_all(user_id=callback.from_user.id)
                        text = "ü§ù –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –∑–∞–ø—Ä–æ—Å—ã —Å –Ω–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π\n\n" \
                               "–° –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ: 3 –∑–∞–ø—Ä–æ—Å–∞ ChatGPT\n\n" \
                               f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è –≤–∞–º–∏ —á–µ–ª–æ–≤–µ–∫: <i>{len(get_referral)}</i>\n\n" \
                               f"–í–∞—à–∞ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: " \
                               f"<code>https://t.me/all_bot_test_bot?start={callback.from_user.id}</code>"

                        await callback.message.edit_text(text=text,
                                                         reply_markup=await MainForms.back_ikb(target="myProfile",
                                                                                               action="getProfile"),
                                                         disable_web_page_preview=False,
                                                         parse_mode="HTML")

                elif data.get('target') == "newDialogue":
                    if data.get('action') == "getDialog":
                        get_user = await CRUDUser.get(user_id=callback.from_user.id)
                        if get_user:
                            text = "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø ChatGPT. –ß–µ–º —è –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å?\n" \
                                   f"–£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å {get_user.queries_chat_gpt} –∑–∞–ø—Ä–æ—Å–æ–≤"

                            await callback.message.edit_text(text=text,
                                                             reply_markup=await MainForms.getDialog_ikb())

                    elif data.get('action') == "SubscriptionGPT":
                        try:
                            text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏1."
                            await callback.message.edit_text(text=text,
                                                             reply_markup=await MainForms.pay_subscription_ikb(
                                                                 targetMain="newDialogue",
                                                                 actionMain="SubscriptionGPT",
                                                                 targetBack="newDialogue",
                                                                 actionBack="getDialog"
                                                             ))
                        except Exception as e:
                            pass

                elif data.get('target') == "help":
                    if data.get('action') == "getHelp":
                        text = "üõ†Ô∏è –ü—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É, ... "

                        await callback.message.edit_text(text=text,
                                                         reply_markup=await MainForms.help_ikb())

